// Code generated by goa v3.0.7, DO NOT EDIT.
//
// register service
//
// Command:
// $ goa gen github.com/k-yomo/elastic_blog_search/src/design -o src/

package register

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// register service registers blog posts to be searched
type Service interface {
	// Register implements register.
	Register(context.Context, *RegisterPayload) (res int, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// APIKeyAuth implements the authorization logic for the APIKey security scheme.
	APIKeyAuth(ctx context.Context, key string, schema *security.APIKeyScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "register"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"register"}

// RegisterPayload is the payload type of the register service register method.
type RegisterPayload struct {
	// API key used to perform authorization
	Key   string
	Posts []*Post
}

type Post struct {
	// Post's id
	ID *string
	// Post's title
	Title *string
	// Post's description
	Description *string
	// Post's body
	Body *string
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "badRequest",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeUnauthenticated builds a goa.ServiceError from an error.
func MakeUnauthenticated(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "unauthenticated",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternal builds a goa.ServiceError from an error.
func MakeInternal(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
		Fault:   true,
	}
}
