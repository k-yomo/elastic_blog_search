// Code generated by goa v3.0.7, DO NOT EDIT.
//
// register endpoints
//
// Command:
// $ goa gen github.com/k-yomo/elastic_blog_search/src/design -o src/

package register

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "register" service endpoints.
type Endpoints struct {
	Register goa.Endpoint
}

// NewEndpoints wraps the methods of the "register" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Register: NewRegisterEndpoint(s, a.APIKeyAuth),
	}
}

// Use applies the given middleware to all the "register" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Register = m(e.Register)
}

// NewRegisterEndpoint returns an endpoint function that calls the method
// "register" of service "register".
func NewRegisterEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*RegisterPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "api_key",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authAPIKeyFn(ctx, p.Key, &sc)
		if err != nil {
			return nil, err
		}
		return s.Register(ctx, p)
	}
}
