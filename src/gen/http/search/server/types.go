// Code generated by goa v3.0.7, DO NOT EDIT.
//
// search HTTP server types
//
// Command:
// $ goa gen github.com/k-yomo/elastic_blog_search/src/design -o src/

package server

import (
	search "github.com/k-yomo/elastic_blog_search/src/gen/search"
)

// SearchResponseBody is the type of the "search" service "search" endpoint
// HTTP response body.
type SearchResponseBody struct {
	Posts     PostCollectionResponseBody `form:"posts" json:"posts" xml:"posts"`
	Page      uint                       `form:"page" json:"page" xml:"page"`
	TotalPage uint                       `form:"totalPage" json:"totalPage" xml:"totalPage"`
}

// PostCollectionResponseBody is used to define fields on response body types.
type PostCollectionResponseBody []*PostResponseBody

// PostResponseBody is used to define fields on response body types.
type PostResponseBody struct {
	// Post's id
	ID string `form:"id" json:"id" xml:"id"`
	// Post's title
	Title string `form:"title" json:"title" xml:"title"`
	// Post's description
	Description string `form:"description" json:"description" xml:"description"`
}

// NewSearchResponseBody builds the HTTP response body from the result of the
// "search" endpoint of the "search" service.
func NewSearchResponseBody(res *search.SearchResult) *SearchResponseBody {
	body := &SearchResponseBody{
		Page:      res.Page,
		TotalPage: res.TotalPage,
	}
	if res.Posts != nil {
		body.Posts = make([]*PostResponseBody, len(res.Posts))
		for i, val := range res.Posts {
			body.Posts[i] = marshalSearchPostToPostResponseBody(val)
		}
	}
	return body
}

// NewSearchPayload builds a search service search endpoint payload.
func NewSearchPayload(query string, page uint, pageSize uint) *search.SearchPayload {
	return &search.SearchPayload{
		Query:    query,
		Page:     page,
		PageSize: pageSize,
	}
}
