// Code generated by goa v3.0.7, DO NOT EDIT.
//
// search HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/k-yomo/elastic_blog_search/src/design -o src/

package server

import (
	"context"
	"net/http"
	"strconv"

	search "github.com/k-yomo/elastic_blog_search/src/gen/search"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeSearchResponse returns an encoder for responses returned by the search
// search endpoint.
func EncodeSearchResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*search.SearchResult)
		enc := encoder(ctx, w)
		body := NewSearchResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSearchRequest returns a decoder for requests sent to the search search
// endpoint.
func DecodeSearchRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			query    string
			page     uint
			pageSize uint
			err      error
		)
		query = r.URL.Query().Get("query")
		if query == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("query", "query string"))
		}
		{
			pageRaw := r.URL.Query().Get("page")
			if pageRaw == "" {
				page = 1
			} else {
				v, err2 := strconv.ParseUint(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "unsigned integer"))
				}
				page = uint(v)
			}
		}
		{
			pageSizeRaw := r.URL.Query().Get("pageSize")
			if pageSizeRaw == "" {
				pageSize = 50
			} else {
				v, err2 := strconv.ParseUint(pageSizeRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("pageSize", pageSizeRaw, "unsigned integer"))
				}
				pageSize = uint(v)
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewSearchPayload(query, page, pageSize)

		return payload, nil
	}
}

// marshalSearchPostToPostResponseBody builds a value of type *PostResponseBody
// from a value of type *search.Post.
func marshalSearchPostToPostResponseBody(v *search.Post) *PostResponseBody {
	res := &PostResponseBody{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
	}

	return res
}
