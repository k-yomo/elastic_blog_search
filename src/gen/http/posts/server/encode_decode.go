// Code generated by goa v3.1.2, DO NOT EDIT.
//
// posts HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/k-yomo/elastic_blog_search/src/design -o src/

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"

	posts "github.com/k-yomo/elastic_blog_search/src/gen/posts"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeRegisterResponse returns an encoder for responses returned by the
// posts register endpoint.
func EncodeRegisterResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(int)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeRegisterRequest returns a decoder for requests sent to the posts
// register endpoint.
func DecodeRegisterRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body RegisterRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateRegisterRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			key string
		)
		key = r.Header.Get("Authorization")
		if key == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewRegisterPayload(&body, key)

		return payload, nil
	}
}

// EncodeSearchResponse returns an encoder for responses returned by the posts
// search endpoint.
func EncodeSearchResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*posts.SearchResult)
		enc := encoder(ctx, w)
		body := NewSearchResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSearchRequest returns a decoder for requests sent to the posts search
// endpoint.
func DecodeSearchRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			query    string
			page     uint
			pageSize uint
			err      error
		)
		query = r.URL.Query().Get("query")
		if query == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("query", "query string"))
		}
		{
			pageRaw := r.URL.Query().Get("page")
			if pageRaw == "" {
				page = 1
			} else {
				v, err2 := strconv.ParseUint(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "unsigned integer"))
				}
				page = uint(v)
			}
		}
		{
			pageSizeRaw := r.URL.Query().Get("pageSize")
			if pageSizeRaw == "" {
				pageSize = 50
			} else {
				v, err2 := strconv.ParseUint(pageSizeRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("pageSize", pageSizeRaw, "unsigned integer"))
				}
				pageSize = uint(v)
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewSearchPayload(query, page, pageSize)

		return payload, nil
	}
}

// EncodeRelatedPostsResponse returns an encoder for responses returned by the
// posts relatedPosts endpoint.
func EncodeRelatedPostsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*posts.RelatedPostsResult)
		enc := encoder(ctx, w)
		body := NewRelatedPostsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeRelatedPostsRequest returns a decoder for requests sent to the posts
// relatedPosts endpoint.
func DecodeRelatedPostsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			url_  string
			count uint
			err   error
		)
		url_ = r.URL.Query().Get("url")
		if url_ == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("url", "query string"))
		}
		{
			countRaw := r.URL.Query().Get("count")
			if countRaw == "" {
				count = 5
			} else {
				v, err2 := strconv.ParseUint(countRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("count", countRaw, "unsigned integer"))
				}
				count = uint(v)
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewRelatedPostsPayload(url_, count)

		return payload, nil
	}
}

// unmarshalPostParamsRequestBodyToPostsPostParams builds a value of type
// *posts.PostParams from a value of type *PostParamsRequestBody.
func unmarshalPostParamsRequestBodyToPostsPostParams(v *PostParamsRequestBody) *posts.PostParams {
	res := &posts.PostParams{
		ID:             v.ID,
		Title:          v.Title,
		Description:    v.Description,
		ScreenImageURL: v.ScreenImageURL,
		Body:           v.Body,
	}

	return res
}

// marshalPostsPostOutputToPostOutputResponseBody builds a value of type
// *PostOutputResponseBody from a value of type *posts.PostOutput.
func marshalPostsPostOutputToPostOutputResponseBody(v *posts.PostOutput) *PostOutputResponseBody {
	res := &PostOutputResponseBody{
		ID:             v.ID,
		Title:          v.Title,
		Description:    v.Description,
		ScreenImageURL: v.ScreenImageURL,
	}

	return res
}
