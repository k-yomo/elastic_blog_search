// Code generated by goa v3.0.7, DO NOT EDIT.
//
// register HTTP server types
//
// Command:
// $ goa gen github.com/k-yomo/elastic_blog_search/src/design -o src/

package server

import (
	register "github.com/k-yomo/elastic_blog_search/src/gen/register"
	goa "goa.design/goa/v3/pkg"
)

// RegisterRequestBody is the type of the "register" service "register"
// endpoint HTTP request body.
type RegisterRequestBody struct {
	Posts []*PostRequestBody `form:"posts,omitempty" json:"posts,omitempty" xml:"posts,omitempty"`
}

// PostRequestBody is used to define fields on request body types.
type PostRequestBody struct {
	// Post's id
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Post's title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Post's description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Post's body
	Body *string `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
}

// NewRegisterPayload builds a register service register endpoint payload.
func NewRegisterPayload(body *RegisterRequestBody, key string) *register.RegisterPayload {
	v := &register.RegisterPayload{}
	v.Posts = make([]*register.Post, len(body.Posts))
	for i, val := range body.Posts {
		v.Posts[i] = unmarshalPostRequestBodyToRegisterPost(val)
	}
	v.Key = key
	return v
}

// ValidateRegisterRequestBody runs the validations defined on
// RegisterRequestBody
func ValidateRegisterRequestBody(body *RegisterRequestBody) (err error) {
	if body.Posts == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("posts", "body"))
	}
	if len(body.Posts) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.posts", body.Posts, len(body.Posts), 1, true))
	}
	return
}
