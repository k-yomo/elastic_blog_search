// Code generated by goa v3.0.7, DO NOT EDIT.
//
// register HTTP server types
//
// Command:
// $ goa gen github.com/k-yomo/elastic_blog_search/src/design -o src/

package server

import (
	register "github.com/k-yomo/elastic_blog_search/src/gen/register"
	goa "goa.design/goa/v3/pkg"
)

// PostRequestBody is used to define fields on request body types.
type PostRequestBody struct {
	// Post's id
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Post's title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Post's description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Post's body
	Body *string `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
}

// NewRegisterPost builds a register service register endpoint payload.
func NewRegisterPost(body []*PostRequestBody) []*register.Post {
	v := make([]*register.Post, len(body))
	for i, val := range body {
		v[i] = &register.Post{
			ID:          *val.ID,
			Title:       *val.Title,
			Description: *val.Description,
			Body:        *val.Body,
		}
	}
	return v
}

// ValidatePostRequestBody runs the validations defined on PostRequestBody
func ValidatePostRequestBody(body *PostRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Body == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("body", "body"))
	}
	return
}
