// Code generated by goa v3.0.7, DO NOT EDIT.
//
// register HTTP client CLI support package
//
// Command:
// $ goa gen github.com/k-yomo/elastic_blog_search/src/design -o src/

package client

import (
	"encoding/json"
	"fmt"

	register "github.com/k-yomo/elastic_blog_search/src/gen/register"
	goa "goa.design/goa/v3/pkg"
)

// BuildRegisterPayload builds the payload for the register register endpoint
// from CLI flags.
func BuildRegisterPayload(registerRegisterBody string, registerRegisterKey string) (*register.RegisterPayload, error) {
	var err error
	var body RegisterRequestBody
	{
		err = json.Unmarshal([]byte(registerRegisterBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"posts\": [\n         {\n            \"body\": \"Tempore voluptas cumque voluptatem aut facere.\",\n            \"description\": \"Assumenda nesciunt nesciunt quasi voluptates perferendis.\",\n            \"id\": \"Earum dolores qui.\",\n            \"title\": \"Dolores alias incidunt sunt ut veniam.\"\n         },\n         {\n            \"body\": \"Tempore voluptas cumque voluptatem aut facere.\",\n            \"description\": \"Assumenda nesciunt nesciunt quasi voluptates perferendis.\",\n            \"id\": \"Earum dolores qui.\",\n            \"title\": \"Dolores alias incidunt sunt ut veniam.\"\n         },\n         {\n            \"body\": \"Tempore voluptas cumque voluptatem aut facere.\",\n            \"description\": \"Assumenda nesciunt nesciunt quasi voluptates perferendis.\",\n            \"id\": \"Earum dolores qui.\",\n            \"title\": \"Dolores alias incidunt sunt ut veniam.\"\n         }\n      ]\n   }'")
		}
		if body.Posts == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("posts", "body"))
		}
		if len(body.Posts) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.posts", body.Posts, len(body.Posts), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var key string
	{
		key = registerRegisterKey
	}
	v := &register.RegisterPayload{}
	if body.Posts != nil {
		v.Posts = make([]*register.Post, len(body.Posts))
		for i, val := range body.Posts {
			v.Posts[i] = marshalPostRequestBodyToRegisterPost(val)
		}
	}
	v.Key = key
	return v, nil
}
